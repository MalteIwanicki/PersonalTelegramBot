import os
from openai import OpenAI
import datetime
import json
from pydantic import BaseModel
from loguru import logger
import config
import card_amount_guesser

config = config.Config()

class AnkiCard(BaseModel):
    front: str
    back: str
    comment:str

class AnkiDeck(BaseModel):
    ankicards: list[AnkiCard]
    
    
def get_token_prices():
    # This function should query OpenAI's API to get the current token prices
    # For demonstration, we will return the hardcoded values
    # You should replace this with an actual API call if available
    return {"prompt": 3 / 1_000_000, "completion": 12 / 1_000_000}


client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
)


def update_costs(usage):
    p_out = usage.completion_tokens * get_token_prices()["completion"]
    p_in = usage.prompt_tokens * get_token_prices()["prompt"]
    config.update_costs(in_cost=p_in, out_cost=p_out)


def chat(text_input):
    config.append_chat_history(f"USER:\n{text_input}")
    result = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": "You are an ALL knowing entity that tries to give me true answers. Respond like you are trying to maximise value per word you are saying. Like you are texting. Dense. Information Heavy. The User can speak english and german",
            },
            {
                "role": "user",
                "content": config.chat_history,
            },
        ],
        model=config.ai_model,
        temperature=0.0,
    )
    update_costs(result.usage)
    answer = result.choices[0].message.content
    config.append_chat_history(f"ASSISTANT:\n{answer}")
    return answer


def create_cards(title, content, ai_model = config.ai_model):
    needed_cards = card_amount_guesser.guess(title, content)
    query = f"""
- Du bist eine deutschsprachige Professorin der Informatik, die für zusätzliches Einkommen Nachhilfeunterricht gibt.
- Du unterrichtest einen Mathe-schwachen Data Science Master Student, der keine selbstständigkeit zeigt und keine mathematischen Formeln mit symbolen versteht, jedoch dessen berühmte Eltern horende Summen zahlen, damit dieser besteht. 
- Das Durchfallen des Nachhilfe Schülers würde das ende der Karriere bedeuten. 
- Es geht hier nicht nur lehrreich zu sein sondern um möglichst viel stoff in den kopf des Studenten zu packen, damit dieser die Prüfung besteht. 
- Dein oberstes Ziel: Stelle sicher dass der Student die Prüfung bestehen wird.
- Analysiere die Vorlesungen und erstelle wertvolle Studienmaterialien in einfach verdaulichem karteikarten Format. 
- Lasse keine Prüfungsrelevanten Fragen oder Details dabei aus.
- Antworte mit genügend Fragen, mindestens {needed_cards}, um jedes konzept und detail abzufragen. 
- Wenn günstig verwende Listen als Antwort anstatt fließtext.
- Bei Fachwörtern nennee die englische Bezeichnung in runder Klammer zusätzlich.
- unter comment schreibst du noch eine Erklärung oder Eselsbrücke oder Hinweise oder Kontext hinzu, alles was das lernen der Karte vereinfachen kann.
- für formeln verwende: [latex]1+1=2[/latex]
- Halte die Karteikarten einfach, klar und konzentriere dich auf die wichtigsten Informationen.
- Stelle sicher, dass die Fragen spezifisch und eindeutig sind.
- Verwende einfache und direkte Sprache, damit die Karten leicht zu lesen und zu verstehen sind.
- Mach jede Karte relativ klein, das bedeutet, dass das "Text"-Feld nicht mehr als einen Satz enthalten sollte.
- Schließe keine Informationen ein, bei denen der Text auf unbekannte Teile verweist.
- Stelle genug Kontext für die Fragen bereit, damit sie kontextfrei und alleine, sinnvoll und beantwortbar ist.
- gebe auch das oberthema an
- Experimentiere mit verschiedenen Frageformaten (z. B. wahr/falsch, Lückentext, kurze Antwort), um das Lernen zu verbessern.
- Stelle sicher, dass das Konzept der Karte verallgemeinert ist und auch ohne Bezug zum Originaltext verstanden wird.
- Priorisiere Fragen, die das Verständnis testen, anstatt einfache Wiedergabe.
- vermeide duplikate
- Wenn eine Antwort in einer Liste organisiert werden kann, füge HTML-Tags hinzu, um diese aufzulisten, z. B.: "<ol><li>item1</li><li>item2</li><li>item3</li></ol>"
- Wenn es mathematische Symbole oder Formeln oder Definitionen gibt, verwende die Anki-Latex-Notation-Tags wie "[latex] latex code [/latex]". Der Eingabetext kann "$" als Latex-Code-Markierung verwenden, aber die Ausgabe muss die "[latex] [/latex]" Tags anstelle der "$" Notation verwenden.

Hier sind Beispiele für die Karten Antworten:
{{
"ankicards":[
{{
    "front": "This is an example of the front of a card generated by ChatGPT to query the material. You can be creative about the best way to ask a question.", 
    "back": "This is the back of the card that is the answer to the front.",
    "comment":"you should really apply this format"
}}, 
{{
    "front": "What is the best way to train a dog?", 
    "back": "Frequent Rate or Reinforcement",
    "comment":"Der beste Weg, einen Hund zu trainieren, ist durch häufige Verstärkung. Das bedeutet, dass positive Verhaltensweisen belohnt werden, um sie zu stärken und häufiger auftreten zu lassen. Dies kann durch Leckerlis, Lob, Spiel oder andere positive Verstärkungen geschehen. Der Schlüssel ist die Konsistenz und Häufigkeit, damit der Hund eine klare Verbindung zwischen seinem Verhalten und der Belohnung herstellen kann."
}}, 

{{
    "front": "This is the front of another card.",
    "back": "This is the back of another card.,
    "comment":"the front contains a question the back an answer"
}},
{{
    "front":"When did Germany win the soccer championships?",
    "back":"<ol><li>1954</li><li>1974</li><li>1990</li><li>2016</li></ol>",
    "comment":"think about the famous football song from sportfreunde stiller"
}},
{{
    "front":"What are the colors of a traffic light?",
    "back":"<ol><li>green</li><li>yellow</li><li>red</li></ol>",
    "comment":"Grün: Diese Farbe signalisiert, dass es sicher ist, die Kreuzung zu überqueren. Fahrzeuge und Fußgänger dürfen sich bewegen, wobei Fahrzeuge anfahren können und Fußgänger die Straße überqueren dürfen. Gelb: Diese Farbe dient als Warnsignal. Es zeigt an, dass sich die Ampel bald auf Rot umschalten wird. Fahrzeuge sollten sich darauf vorbereiten, anzuhalten, und Fußgänger sollten die Straße nicht mehr betreten. Rot: Rot bedeutet, dass der Verkehr angehalten werden muss. Fahrzeuge müssen an der Haltelinie stehen bleiben, und Fußgänger dürfen die Straße nicht überqueren."
}},
{{
    "front":"The mass-energy equivalence is described by which famous equation?",
    "back":"<div class='formular'>[latex]E = m \\cdot c^2[/latex]</div><div class='info'>In this equation:<ul><li>[latex]E[/latex] represents energy.</li><li>[latex]m[/latex] represents mass.</li><li>[latex]c[/latex] represents the speed of light in a vacuum, approximately [latex]3 \\times 10^8[/latex] meters per second.</li></ul></div>",
    "comment":"Die berühmte Gleichung stammt von Albert Einstein und beschreibt den Zusammenhang zwischen Energie (E), Masse (m) und der Lichtgeschwindigkeit (c). Diese Gleichung ist ein Teil seiner speziellen Relativitätstheorie."
}},
{{
    "front":"How many federal states has germany?",
    "back":"16"
    "comment":"Deutschland ist ein föderaler Staat, der aus 16 Bundesländern besteht. Jedes Bundesland hat seine eigene Regierung und Verfassung, was es zu einer interessanten und vielfältigen politischen Struktur macht."
}}
]
}}

'''


Hier ist der Vorlesungstext zum Thema {title} der bearbeitet werden muss:
'''
{content}
'''
Erzeuge jetzt mindestens {needed_cards} karteikarten.
"""
    temperature = 0
    result = client.beta.chat.completions.parse(
        messages=[
            {
                "role": "user",
                "content": query,
            },
        ],
        model=ai_model,
        temperature=temperature,
        response_format=AnkiDeck
    )
    logger.debug(f"{result}")
    update_costs(result.usage)
    cards = [card.model_dump() for card in result.choices[0].message.parsed.ankicards]
    return cards
    

def extract_json_array(text):
    try:
        return json.dumps(text, ensure_ascii=False, indent=2)
    except:
        return None
